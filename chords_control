 #!/usr/local/bin/python

"""
The CHORDS management script. Use to manage the CHORDS portal configuration,
running/stopping the portal, and updating the portal software.

The CHORDS configuration is kept in a YAML file (default chords.yml).
This file contains standard configuration items, followed by user
created non-standard options. The later are for developer use only.
There is a one-to-one corresponence between the CHORDS configuration file
and .env. The .env simply simply contains environment variables which
will be passed to docker-compose. In most cases, .env is created from
the configuration file. However, the "backwards" command allows the configuration
file to be created from .env.

In configuration mode (-c), the existing configuration will be 
read from the configuration file, the user will be prompted for changes,
and the configuration file will be re-written. For each configuration item,
the user may select the current value (hit enter), select the default
value (enter a period), or change the value (enter a new value). The configuration
may be initialized to complete default vaues by using the -d switch in conjunction
with -c. 

If the CHORDs configuration file does not exist, then it will be created. Thus,
to create an initial default configuration, use:
   ./chords_control -c -d

A .env file is also created by the configuration mode. It contains
 environment variable commands, with one for each configuration item. 
This .env file is used by docker-compose. The non-standard options will 
be included in .env, allowing developers to test additional environment variables,
without having to edit the standardoptions specified in this script.

The -r and -s switches are used to run/stop a portal.

The -u switch updates the portal software by pulling the docker images.

Use -t to see the current portal status.

The devmode (-m) enables development mode, where the current directory
is mounted as the CHORDS Rails source.

The the --renew option makes a backup copy of this script, and pulls down 
a new version from github.
"""

import os
import stat
import sys
import re
import shutil
import datetime
import argparse
import subprocess
import json
import platform
import tempfile
from collections import OrderedDict

# The definitions of standard configuration items. These are tri-tuples:
# [0]: The configuration item description. This will be printed as a prompt
#      during configuration, and included in the configuration file as a description. 
# [1]: The name of the environment variable to be set in the .env file.
# [2]: The default value.
# [3]: Verify:True or False. If True, the user response is compared to the choices available,
#      verifying that an valid response was entered.
# [4]: If [3] is true, this is a list of valid choices. It may be modified/populated
#      dynamically by the script
# 
# When you need to add required keys to the configuration, just define them here.
stdConfigItems = [
    [
        "The PASSWORD for sysadmin access to CHORDS, mysql and influxdb in docker.\n"
        "(NOTE: This not the CHORDS website admin login)\n"
        "Replace this with a secure password.",
        "CHORDS_ADMIN_PW",  
        "chords_ec_demo",
        False,
        []
    ],
    [
        "The PASSWORD for read-only access to influxdb.",
        "CHORDS_GUEST_PW",
        "guest",
        False,
        []
    ],
    [
        "An EMAIL ACCOUNT that will send CHORDS password reset instructions, \n"
        "Grafana alerts, etc. DO NOT use a personal or business account for this; \n"
        "instead set up an account specifically for CHORDS (e.g. at gmail).",
        "CHORDS_EMAIL_ADDRESS",
        "unknown@gmail.com",
        False,
        []
    ],
    [
        "The PASSWORD for the email account that will send CHORDS password reset instructions, \n"
        "Grafana alerts, etc. DO NOT use a personal or business account for this; \n"
        "instead set up an account specifically for CHORDS (e.g. at gmail).",
        "CHORDS_EMAIL_PASSWORD",
        "unknown",
        False,
        []
    ],
    [
        "The EMAIL SERVER that can relay CHORDS password reset instructions, \n"
        "Grafana alerts, etc. You must have an account on this service.",
        "CHORDS_EMAIL_SERVER",
        "smtp.gmail.com",
        False,
        []
    ],
    [
        "The SERVER PORT for the email server that can relay CHORDS password reset instructions, \n"
        "Grafana alerts, etc. You must have an account on this service.",
        "CHORDS_EMAIL_PORT",
        "587",
        False,
        []
    ],
    [
        "The PASSWORD for admin access to Grafana.\n"
        "Once Grafana is initialized with this password,\n"
        "it can only be changed from the Grafana admin web page.\n"
        "Replace this with a secure password.",
        "GRAFANA_ADMIN_PW",  
        "admin",
        False,
        []
    ],
    [
        "A SECRET KEY BASE for Rails. Generate a\n"
        "secure value (e.g. 'openssl rand -hex 32').",
        "SECRET_KEY_BASE",
        "aaaaaaaaaaa",
        False,
        []
    ],
    [
        "The time series DATABASE RETENTION DURATION, e.g. 168h or 52w. Use \"inf\" for permanent.\n"
        "This value can be changed on successive restarts of a portal. Note: making it shorter\n"
        "will trim the existing time series database.",
        "DB_RETENTION",
        "inf",
        False,
        []
    ],
    [
        "The VERSION TAG of the desired CHORDS release.",
        "DOCKER_TAG",
        "latest",
        True,
        []
    ],
    [
        "The GIT BRANCH where the docker-compose recipe will be fetched.\n"
        "Use \"master\" unless you have a valid reason to choose otherwise.",
        "GIT_BRANCH",
        "master",
        True,
        []
    ],
    [
        "CHORDS HTTP port.\n"
        "(Typically only changed if there are port conflicts or firewall restrictions).",
        "CHORDS_HTTP_PORT",
        "80",
        False,
        []
    ],
    [
        "Grafana port.\n"
        "(Typically only changed if there are port conflicts or firewall restrictions).",
        "GRAFANA_HTTP_PORT",
        "3000",
        False,
        []
    ],
    [
        "PROXY URL (e.g. http://proxy.myorg.com:8080).\n"
        "Leave blank if not needed.",
        "PROXY",
        "",
        False,
        []
    ],
    [
        "Enable InfluxData kapacitor.\n"
        "This is experimental.In general, do NOT enable,\n"
        "as it opens a security hole.",
        "KAPACITOR_ENABLED",
        "false",
        True,
        [
            "true",
            "false"
        ]
    ],
    [
        "The RAILS ENVIRONMENT. Unlikely to to be anything other than \"production\".",
        "RAILS_ENV",
        "production",
        True,
        [
            "production",
            "development",
            "test"
        ]
    ],
    [
        "The number of NGINX WORKERS. 4 is a good value",
        "WORKERS",
        4,
        False,
        []
    ]
]

# If set True, add some diagnostic printing.
verbose = False

# Terminal control characters
termBoldOn  = '\033[1m'
termBoldOff = '\033[0m'
if os.name == 'nt':
    termBoldOn  = ''
    termBoldOff = ''
    
# Platform characteristics
os_name = os.name
os_arch = platform.uname()[4]

#####################################################################
def createBackupFile(filename, print_note=True):
    """
    Create a backup copy of the file. A timestamp is included 
    in the new file name. If print_note is True, print
    out a  friendly message indicating that a backup copy was made.
    """
    # No need to backup a file that doesn't already exist or is zero size
    if not os.path.isfile(filename):
        return
    
    if os.stat(filename).st_size == 0:
        return
    
    # Create the backup file name
    fsplit = os.path.splitext(filename)
    backupfile = fsplit[0] + "-" + datetime.datetime.now().strftime('%Y-%m-%d-%H%M%S')
    if fsplit[1]:
        backupfile = backupfile + fsplit[1]     
    # Copy the existing foile to the backup
    shutil.copyfile(filename, backupfile)   
    
    # Make it accesible only to the use
    os.chmod(backupfile, stat.S_IRUSR | stat.S_IWUSR)

    if print_note:
        print "*** " + filename + " has been backed up to " + backupfile + "."

#####################################################################
class CommandArgs:
    """
    Manage the command line options.
    The options are collated in a dictionary keyed on the option long name.
    The option dictionary will have None for options that aren't present.
    """
    def __init__(self):
        global os_name
        global os_arch
        
        description="""
CHORDS configuration and operation management.
        
In configuration mode, you are prompted for configuration options. These will be
saved in the configuration file (default chords.yml) and in a corresponding .env file. 
Backup copies will be made of the existing configuration files. Use the --defalut option
to set the configuration to default values.
"""
        
        epilog = """
At least one and only one of --config, --env, --backwards, --run, --stop, --update 
or --renew can be specified. --default must be accompanied by --config. 
To create an initial default configuration: 'python chords_control --config --default'

""" + "This operating system is " + os_name + ", the architecture is " + os_arch + "."
        
        parser = argparse.ArgumentParser(description=description, epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
        parser.add_argument("-r", "--run",     help="run",                                                  default=False,        action="store_true")
        parser.add_argument("-s", "--stop",    help="stop",                                                 default=False,        action="store_true")
        parser.add_argument("-u", "--update",  help="update",                                               default=False,        action="store_true")
        parser.add_argument("-f", "--file",    help="configuration file (default chords.yml)",              default="chords.yml", action="store")
        parser.add_argument("-c", "--config",  help="prompt for configuration and write config/.env files", default=False,        action="store_true")
        parser.add_argument("-d", "--default", help="set all configuration values to defaults",             default=False,        action="store_true")
        parser.add_argument("-t", "--status",  help="status",                                               default=False,        action="store_true")
        parser.add_argument("-e", "--env",     help="read config file and write CHORDS .env file",          default=False,        action="store_true")
        parser.add_argument("-b", "--backwards", help="read CHORDS .env file and write config file (use with caution!)", default=False, action="store_true")
        parser.add_argument("-x", "--proxy",   help="proxy for curl (e.g. proxy.myorg.com:8080)",           default="",           action="store")
        parser.add_argument("-m", "--devmode", help="run containers in source code development mode",       default=False,        action="store_true")
        parser.add_argument("-w", "--renew",   help="replace chords_control with a new version (use with caution!)",  default=False, action="store_true")
        parser.add_argument("-v", "--verbose", help="enable verbose",                                       default=False,        action="store_true")

        # If no switches, print the help.
        if len(sys.argv[1:])==0:
            parser.print_help()
            parser.exit()

        # Parse the command line. 
        args = parser.parse_args()
        self.options = vars(args)
        
        # Make sure that at most only one of these args was specified
        o = self.options
        
        if [o['config'], o['run'], o['stop'], o['update'], o['env'], o['backwards'], o['renew']].count(True) > 1:
            print epilog
            exit(1)
            
        if o['default'] and not o['config']:
            print epilog
            exit(1)
            
    def get_options(self):
        # return the dictionary of existing options.
        return self.options 

#####################################################################
class ChordsConfig(OrderedDict):
    """
    Manage a CHORDS configuration. It is associated with the CHORDS configuration
    file, which is a YAML document containing comments and key:value pairs.
    Note: more complex YAML structuring is not supported.
    """
    def __init__(self, configfile):
        OrderedDict.__init__(self)
        
        # Initialize the configuration item descriptions. These are 
        # used as comments in the output configuration file.
        self.initConfigItems()

        # Fetch the configuration key:value pairs from the configuration file.
        # Add them to self.
        self.getPairs(configfile)
                
    def getPairs(self, configfile):
        
        items = dict()
        # Get the current configuration file
        if not os.path.isfile(configfile):
            f = open(options["file"], 'w')
            f.close()
            print configfile, 'has been created'
        
        f = open(configfile)
        lines = f.readlines()
        f.close()
        i = 1
        for l in lines:
            l = l.strip()
            if len(l):
                if l[0] != "#":
                    tokens = l.split(":")
                    if len(tokens) != 2:
                        print "Ambiguous value in line", i, "<" + l + ">"
                    items[tokens[0].strip()] = tokens[1].strip()
            i = i + 1

        config = OrderedDict()
        # Collect all of the standard items. Add them if they
        # weren't in the file
        for key in self.configItems.keys():
            if key in items.keys():
                config[key] = items[key]
                del items[key]
            else:
                config[key] = self.configItems[key]['default']
        for key in items.keys():
            # Append any remaining items that aren't in the standard list
            config[key] = items[key]
        for key in config.keys():
            self[key] = config[key]
        
    def initConfigItems(self):
        """
        Create a collection of config items which must be in the final configuration.
        These items define the default values which will be used if they haven't already been
        set in a configuration.
        """
        self.configItems  = OrderedDict()
        
        for i in stdConfigItems:
            self.configItems[i[1]] = ConfigItem(description=i[0], default=i[2], verify=i[3], choices=i[4])

    def toYML(self):
        """
        Create the YML version of the configuration. Line terminators will be included.
        The standard items are wrtten first, followed by the extras.
        """
        yml = ''
        for key in self.keys():
            if key in self.configItems.keys():
                descripts = self.configItems[key]['description'].split('\n')
                for d in descripts:
                    yml =  yml + '# ' + d + '\n'
                yml = yml + key + ': ' + str(self[key]) + '\n'
        yml = yml +  '#' + '\n' + '# Non-standard options.' + '\n'
        for key in self.keys():
            if key not in self.configItems.keys():
                yml = yml + key + ': ' + str(self[key]) + '\n'
        return yml
    
    def queryValues(self, usedefault):
        """
        Go through the configuration, asking the user if they want to 
        change the values. The response can be a return, to accept the
        value, a new value to replace the value, or a period to use the default value.
        The items found in configItems are done first, followed by all other
        items.
        """
        print "Enter:\n   Return to keep the current value, or\n   Period (.) to select to the default value, or a\n   New value."

        # Process config items that are part of the standard configuration
        for key in self.keys():
            print
            if key in self.configItems.keys():
                description=self.configItems[key]['description']
                print
                # If verify is enabled for this item, then we need to populate the valid choices.
                if self.configItems[key]['verify']:
                    description = description + ' Valid choices are: '
                    for choice in self.configItems[key]['choices']:
                        description = description + '\'' + choice + '\' '
                while True:
                    self.queryValue(key=key, 
                                    usedefault = usedefault,
                                    description=description,
                                    defaultval =self.configItems[key]['default'])
                    if not self.configItems[key]['verify']:
                        break;
                    else:
                        if self[key] in self.configItems[key]['choices']:
                            break;
                        else:
                            print '>>>> You entered an invalid value. Please try again (or use ctrl-C to exit)'

        # Process items that extras which are not part of the standard configuration
        for key in self.keys():
            if key not in self.configItems.keys():
                self.queryValue(key=key, usedefault = usedefault)
                
    def queryValue(self, key, usedefault, description=None, defaultval=None):
        """
        Query the user for a replacement value.
        """
        global termBoldOn, termBoldOff
        if description:
            print description
        print key,
        if defaultval:
            print "(default: " + str(defaultval) + ")" ,
        print termBoldOn + '[' + str(self[key]) + ']'+ termBoldOff + '? ',
        if not usedefault:
            l = sys.stdin.readline().strip()
        else:
            l = "."
            print ".",
        # An empty line means retain value
        if l != "":
            # A period means use the default, if it is avaiable
            if l == ".":
                self[key] = defaultval
            # Other replace with the user entered value
            else:
                self[key] = l
        if usedefault:
            print
            
    def writeYMLFile(self, configfile):
        """
        Write the configuration to the file. The whole configuration is written,
        starting with the elements listed in the configItems. Configuration items
        are prefixed with the comments provided in the configItems.
        
        If specified, a backup copy of the original file is created.
        """

        print
        createBackupFile(configfile)

        f = open(configfile, "w")
        f.write(self.toYML())
        f.close()
        os.chmod(configfile, stat.S_IRUSR | stat.S_IWUSR)
        print "*** " + options["file"] + " has been written with the new configuration."

    def writeEnvFile(self):
        """
        Write the configuration to the .env file, in environment
        notation.
        
        A backup copy of the original file is created.
        """
        createBackupFile(".env")
        
        f = open(".env", 'w')
        for key in self.keys():
            f.write(key + "=" + str(self[key])+"\n")
        f.close()
        os.chmod(".env", stat.S_IRUSR | stat.S_IWUSR)
        print "*** .env has been written with the new configuration."
        

#####################################################################
class ConfigItem(OrderedDict):
    """
    An expected configuration item. The default value and description
    are recorded.
    """
    def __init__(self, default, description, verify, choices):
        OrderedDict.__init__(self)
        self["default"] = default
        self["description"] = description
        self["verify"] = verify
        self["choices"] = choices
    
#####################################################################
class ChordsGit:
    """
    Manage CHORDS git activities.
    """
    def __init__(self, proxy=""):
        # The path for the docker-compose configuration.
        self.proxy = proxy
        
    def fetch(self, git_branch, files):
        """
        Fetch files from the CHORDS git repository.
        git_branch - the source brance
        files - a single file or a list of files
        """
        
        if not isinstance(files, list):
            files = [files]

        for file in files:
            file_url = 'https://raw.githubusercontent.com/NCAR/chords/'+ git_branch + '/' + file
#            if os_arch[:3] == 'arm':
#                docker_compose_yml = 'https://raw.githubusercontent.com/NCAR/chords/' + git_branch + '/rpi-docker-compose.yml'
    
            proxy_switch = []
            if self.proxy != '':
                proxy_switch = ['-xxx', self.proxy]
                    
            print 'Downloading ' + file_url + '.',
            curl_cmd = [
                'curl', '-O', '-s', file_url
                ]
            if os_name == 'nt':
              curl_cmd[1:1] = ['-k']
    
            # Insert proxy switch
            curl_cmd[1:1] = proxy_switch
    
            os_cmd(curl_cmd)
            print

    def branches(self):
        git_cmd = [
            'git', 'ls-remote', '--heads', 'https://github.com/ncar/chords'
            ]
        heads = [e.replace('refs/heads/','') for e in os_cmd(git_cmd,printlines=False).split()[1::2]]
        heads.remove('gh-pages')
        return heads
        
#####################################################################
class Docker:
    """
    Manage docker activities. docker-compose.yml and docker-compose-dev.yml are 
    expected in the working directory.
    """

    def __init__(self, proxy=""):
        global os_name
        global os_arch
        
        self.docker_compose_yml = 'docker-compose.yml'
        self.dockerhub_tags_uri = "https://registry.hub.docker.com/v1/repositories/ncareol/chords/tags"        
        if os_arch[:3] == 'arm':
            self.docker_compose_yml = 'rpi-docker-compose.yml'
            self.dockerhub_tags_uri = "https://registry.hub.docker.com/v1/repositories/ncareol/rpi-chords/tags"

        # Determine the path for docker-compose
        if os_name == 'nt':
            self.docker_compose_cmd = 'docker-compose'
        else:
            cmd_choices = ['/usr/local/bin/docker-compose', '/usr/bin/docker-compose', '/bin/docker-compose']
            found_cmd = False
            for choice in cmd_choices:
                self.docker_compose_cmd = choice
                if checkFileExists(self.docker_compose_cmd, print_warning=False, exit_on_failure=False):
                    found_cmd = True
                    break
            if not found_cmd:
                print 'docker-compose was not found in', cmd_choices
                print 'You must install docker-compose before proceeding.'
                exit(1)
    
        if not checkFileExists(self.docker_compose_yml, exit_on_failure=False):
          git_branches = ChordsGit().branches()	
          git_branch = ''	
          while True:	
              print "Which branch do you want to pull "+self.docker_compose_yml+" from (",	
              for b in git_branches:	
                  print '\''+b+'\'',	
              print ')? ',	
              git_branch = sys.stdin.readline().strip()	
              if git_branch in git_branches:	
                  break	
              else:	
                  print "The", choice, "branch is not avaiable."
            ChordsGit(proxy=proxy).fetch(git_branch=git_branch, files=self.docker_compose_yml)
             
        
    def ps(self):
        """
        Return an array containing a dictionary for each currently running container.
        The dictionaries keys are a subset of the output columns from docker ps. They are:
            name:
            runningfor
            status
            createdat
            image
        """

        ps_cmd = ['docker',
              'ps', 
              '--format', 
              '\"name\":\"{{.Names}}\", \"runningfor\":\"{{.RunningFor}}\", \"status\":\"{{.Status}}\", \"createdat\":\"{{.CreatedAt}}\", \"image\":\"{{.Image}}\"']

        ps_result = os_cmd(ps_cmd, printlines=False).split('\n')

        containers = []
        for p in ps_result:
            p = p.strip()
            if p != '':
                if not re.search("WARNING", p):
                    p = '{' + p + '}'
                    containers.append(json.loads(p))
        
        # Convert the json unicode to bytes
        return byteify(containers)
    
    def up(self, devmode=False):
        """
        Bring the containers up with docker-compose.
        """
        # Make sure that .env exists
        if not os.path.isfile('.env'):
            print '*** The environment file .env is missing. Use chords_control to create it.'
            exit (1)
            
        # Find out the release that we are running
        d = grep('DOCKER_TAG', '.env')
        d = d[0].split('=')
        if len(d) == 2:
            print '*** Running the \'' + d[1] + '\' release of CHORDS',
            if not devmode:
                print '.'
            else:
                print ', in development mode.'
        else:
            print '.env file is incorrectly formatted (DOCKER_TAG is missing)'
            exit (1)
        
        if devmode == False:
            up_cmd = [self.docker_compose_cmd,
              '-f', self.docker_compose_yml, '-p', 'chords', 'up', '-d']
        else:
            up_cmd = [self.docker_compose_cmd,
              '-p', 'chords', 
              '-f', 'docker-compose.yml', '-f', 'docker-compose-dev.yml', 
              'up', '-d']
            
        os_cmd(up_cmd)
    
    def down(self):
        """
        Take the containers down with docker-compose.
        """
        dn_cmd = [self.docker_compose_cmd,
              '-f', self.docker_compose_yml, '-p', 'chords', 'down']
        os_cmd(dn_cmd)

    def pull(self):
        """
        Pull docker images.
        """
        
        # We need docker-compose.yml
        checkFileExists(self.docker_compose_yml)
        
        pull_cmd = [self.docker_compose_cmd,
              '-f', self.docker_compose_yml, 'pull']
        os_cmd(pull_cmd)
        
    def tags(self):
        """
        Return an array of tag names for dockerhub images.
        """
          
        curl_cmd = [
            'curl', '-s', self.dockerhub_tags_uri
            ]
        if os_name == 'nt':
          curl_cmd[1:1] = ['-k']
        
        curl_result = os_cmd(curl_cmd, printlines=False)
        tags = []
        for t in json.loads(curl_result):
            tags.append(byteify(t["name"]))
            
        return tags

#####################################################################
def createConfigFilefromEnv(options):
  """
  Read the .env file, and convert it into a configuration file.
  options["file"] is the name of the new configuration file.
  If the named configuration file already exists, a backup copy is 
  made when the new configuration is saved.
  Since we are using the ChordsConfig class, any values
  not present in .env will be given default values.
  """
  
  # create a new temporary configuration file.
  tfile = tempfile.mkstemp(prefix="chords_control_", text=True)[1]
  cfile = open(tfile, "w")
  if os.path.isfile(".env") == True:
    efile = open(".env")
    lines = efile.readlines()
    for l in lines:
      l = l.replace("=", ":")
      cfile.write(l)
  cfile.close()
  
  # Process the temporary configuration file, which will
  # merge in default values for variables that weren't in .env.
  config = ChordsConfig(configfile=tfile)
  
  # Save the new configuration file and update the .env file.
  config.writeYMLFile(options["file"])
  config.writeEnvFile()

#####################################################################
def os_cmd(cmd, printlines=True):
    """
    Run a shell command. The command output is returned as a single string, with each
    line delimited by a newline. 
    """
    if verbose:
        print ' '.join(str(x) for x in cmd)
    try:
        proc = subprocess.Popen(cmd,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lines = ''
        while True:
          line = proc.stdout.readline()
          lines = lines + line
          if line != '':
            #the real code does filtering here
            if printlines:
                print line.rstrip()
          else:
            break
        return lines
    except Exception as e:
        print str(e) + ': ' + ' '.join(str(x) for x in cmd)


#####################################################################
def byteify(input):
    """
    Convert unicode to a byte strings
    """
    if isinstance(input, dict):
        return {byteify(key): byteify(value)
                for key, value in input.iteritems()}
    elif isinstance(input, list):
        return [byteify(element) for element in input]
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    else:
        return input
    
#####################################################################
def addChoicesToDOCKER_TAG(proxy=""):
    """
    Get the avaiable tags and and them to the DOCKER_TAG valid choices.
    Modifies stdConfigItems.
    """
    for s in stdConfigItems:
        if s[1] =="DOCKER_TAG":
            tags = Docker(proxy=proxy).tags()
            for t in tags:
                s[4].append(t)
    
#####################################################################
def addChoicesToGIT_BRANCH(proxy=""):
    """
    Get the avaiable branches and and them to the GIT_BRANCH valid choices. 
    Modifies stdConfigItems.
    """
    for s in stdConfigItems:
        if s[1] =="GIT_BRANCH":
            branches = ChordsGit(proxy=proxy).branches()
            for b in branches:
                s[4].append(b)
    
#####################################################################
def checkFileExists(file, writeable=False, print_warning=True, exit_on_failure=True):
    """
    Make sure that the file is readable. If not, print error message
    and exit.
    """

    if not os.path.isfile(file) or not os.access(file, os.R_OK if not writeable else os.W_OK):
        if print_warning:
            print "File " + file +  " doesn't exist or isn't readable."
        if exit_on_failure:
            exit(1)
        else:
            return False
    return True
  
#####################################################################
def grep(expression, file):
    """
    Find a lines in a file containing the expression.
    Return ass an array of strings. White space is
    removed.
    """
    file = open(file, "r")

    matches = []
    for line in file:
       if re.search(expression, line):
           matches.append(line.strip())

    return matches
    
#####################################################################
def renew_script(proxy):
    """
    Update this script and docker-compose configurations.l.
    A github branch will be requested.
    """
    script_name = 'chords_control'
    
    if not checkFileExists(script_name, writeable=True, print_warning=False, exit_on_failure=False):
        print "Either " + script_name + " isn't located in this directory, or it is not writeable."
        exit(1)
        
    git_branches = ChordsGit().branches()
    git_branch = ''
    while True:
        print "Which branch do you want to pull "+script_name+" from (",
        for b in git_branches:
            print '\''+b+'\'',
        print ')? ',
        git_branch = sys.stdin.readline().strip()
        if git_branch in git_branches:
            break
        else:
            print "The", choice, "branch is not avaiable."
            
    files = [script_name, "docker-compose.yml", "docker-compose-dev.yml"]
    for file in files:
        createBackupFile(file)
            
    ChordsGit(proxy=proxy).fetch(git_branch=git_branch, files=files)

#####################################################################
#####################################################################

if __name__ == '__main__':
    
    # Get the command line options
    options = CommandArgs().get_options()
    verbose = options['verbose']
    
    # Adjust the available releases
    addChoicesToDOCKER_TAG()
    
    # Adjust the available branches
    addChoicesToGIT_BRANCH()
    
    # --- Command procesing ---
    
    # Run the CHORDS portal
    if options["run"] == True:
        if options['devmode'] == True:
            checkFileExists('docker-compose-dev.yml')
        
        Docker(proxy=options['proxy']).up(options['devmode'])
        
    # Stop the currently running CHORDS portal
    if options["stop"] == True:
        Docker(proxy=options['proxy']).down()
    
    # Show the current CHORDS status
    if options["status"] == True:
        for c in Docker(proxy=options['proxy']).ps():
            print c['name'] + ': ' + str(c)
    
    # Prompt and update the configuration
    if options["config"] == True:
        config = ChordsConfig(configfile=options['file'])
        config.queryValues(usedefault=options['default'])
        config.writeYMLFile(configfile=options['file'])
        config.writeEnvFile()
        print
        print "*** Don't forget to run 'python chords_control --update' if you have changed the configuration."
    
    # Create the .env file from the configuration file
    if options["env"] == True:
        if not os.path.isfile(options["file"]):
            print "The CHORDS configuration file " + options['file'] + " does not exist. It can be created with ./chords_control -c -d [-f FILE]"
            exit(1)
        config = ChordsConfig(configfile=options['file'])
        config.writeEnvFile()
        
    # Create the configuration file from the .env file
    if options["backwards"] == True:
        createConfigFilefromEnv(options)

    # Update the docker images
    if options["update"] == True:
        if not os.path.isfile(options["file"]):
            print "The CHORDS configuration file " + options['file'] + " does not exist. It can be created with ./chords_control -c -d [-f FILE]"
            exit(1)
        # Get the system configuration.
        config = ChordsConfig(configfile=options['file'])
        # Get items from git that are needed.
        ChordsGit(proxy=options['proxy']).fetch(git_branch=config["GIT_BRANCH"], files="docker-compose.yml")
        # Pull the images.
        Docker(proxy=config['PROXY']).pull()
      
    # Replace this script with one from the repository
    if options["renew"] == True:
        renew_script(proxy=options['proxy'])
        

